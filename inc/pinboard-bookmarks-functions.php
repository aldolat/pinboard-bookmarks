<?php
/**
 * Prevent direct access to this file.
 *
 * @since 1.0
 */
if ( ! defined( 'WPINC' ) ) {
   exit( 'No script kiddies please!' );
}

/**
 * Build the tags string for RSS URL.
 *
 * @since 1.0
 * @param string The comma separated list of tags.
 * @return string The tags part to be used in RSS URL.
 * @example /t:books/t:comics
 */
function pinboard_bookmarks_get_tags_for_url( $tags ) {
    $tags_for_url = '';

    // Sanitize $tags
    $tags = strip_tags( $tags );

    // Replace all the occurrences of comma and space in any mix and quantity with a single space.
    $tags = trim( preg_replace( '([\s,]+)', ' ', $tags ) );

    $tags = strtolower( $tags );
    $tags = explode( ' ', $tags );
    $number_of_tags = count( $tags );

    if ( 1 < $number_of_tags ) {
        // We have more than 4 tags
        if ( 4 < $number_of_tags ) {
            // Pinboard accepts maximum 4 tags for a single query
            $tags_slice = array_slice( $tags, 0, 4 );
            foreach ( $tags_slice as $tag ) {
                $tags_for_url .= 't:' . $tag . '/';
            }
        } else {
            // We have 2 or 3 tags
            foreach ( $tags as $tag ) {
                $tags_for_url .= 't:' . $tag . '/';
            }
        }
    } else {
        // We have 1 tag only
        $tags = implode( ' ', $tags );
        $tags_for_url = 't:' . $tags;
    }

    return $tags_for_url;
}

/**
 * Check for the cache lifetime in the database and set it to 1800 seconds minimum.
 *
 * @since 1.0
 * @param integer $seconds The number of seconds of feed lifetime.
 * @return integer The number of seconds of feed lifetime.
 * @link http://codex.wordpress.org/Plugin_API/Filter_Reference/wp_feed_cache_transient_lifetime Codex Documentation
 */
function pinboard_bookmarks_cache_handler( $seconds ) {
	$options = (array) get_option( 'widget_pinboard-bookmarks-widget' );
	$seconds = isset( $options['time'] ) ? $options['time'] : 1800;
	return $seconds;
}

/**
 * Return an HTML comment with the version of the plugin.
 *
 * @since 1.0
 * @return string $output The HTML comment.
 */
function pinboard_bookmarks_get_generated_by() {
	$output = "\n" . '<!-- Generated by Pinboard Bookmarks ' . PINBOARD_BOOKMARKS_PLUGIN_VERSION . ' -->' . "\n";
	return $output;
}

/**
 * Register the widget.
 *
 * @since 1.0
 */
function pinboard_bookmarks_load_widget() {
	register_widget( 'Pinboard_Bookmarks_Widget' );
}

/**
 * Load the CSS file.
 * The file will be loaded only in the widgets admin page.
 *
 * @since 1.0
 */
function pinboard_bookmarks_load_scripts( $hook ) {
 	if ( $hook != 'widgets.php' ) {
		return;
	}

	// Register and enqueue the CSS file
	wp_register_style( 'pinboard_bookmarks_style', plugins_url( 'pinboard-bookmarks-styles.css', __FILE__ ), array(), PINBOARD_BOOKMARKS_PLUGIN_VERSION, 'all' );
	wp_enqueue_style( 'pinboard_bookmarks_style' );
}

/**
 * Return the debugging informations.
 *
 * @param array $args {
 *      The array containing the custom parameters.
 *
 *      @type boolean $admin_only    If the administrators only can view the debugging informations.
 *      @type boolean $debug_options If display the parameters of the widget.
 *      @type boolean $debug_urls    If display the URLS and the parts used to build them.
 *      @type array   $options       The parameters of the widget.
 *      @type array   $urls          The set of URLS.
 * }
 * @since 1.0
 * @return string The HTML for displaying the debugging informations.
 */
function pinboard_bookmarks_debug( $args ) {
    $defaults = array (
        'admin_only'    => true,
        'debug_options' => false,
        'debug_urls'    => false,
		'options'       => '',
        'urls'          => '',
	);
	$args = wp_parse_args( $args, $defaults );
	extract( $args, EXTR_SKIP );

    $output = '';

    if ( $debug_options || $debug_urls ) {
		global $wp_version;
		$output .= '<h3 class="pinboard-bookmarks-debug-title">' . sprintf( esc_html__( '%s Debug', 'pinboard-bookmarks' ), 'Pinboard Bookmarks' ) . '</h3>';
		$output .= '<h4 class="pinboard-bookmarks-debug-env"><strong>' . esc_html__( 'Environment informations:', 'pinboard-bookmarks' ) . '</strong></h4>';
		$output .= '<ul class="pinboard-bookmarks-debug-ul"><li class="pinboard-bookmarks-debug-li">' . sprintf( esc_html__( 'Site URL: %s', 'pinboard-bookmarks' ), esc_url( site_url() ) . '</li>' );
		$output .= '<li class="pinboard-bookmarks-debug-li">' . sprintf( esc_html__( 'WP version: %s', 'pinboard-bookmarks' ), $wp_version . '</li>' );
		$output .= '<li class="pinboard-bookmarks-debug-li">' . sprintf( esc_html__( 'Plugin version: %s', 'pinboard-bookmarks' ), PINBOARD_BOOKMARKS_PLUGIN_VERSION . '</li>' );
		$output .= '</ul>';
	}

    if ( $debug_options ) {
        $output .= '<h4 class="pinboard-bookmarks-debug-opts"><strong>' . esc_html__( 'The options:', 'pinboard-bookmarks' ) . '</strong></h4>';
        $output .= '<ul class="pinboard-bookmarks-debug-ul">';
        foreach ( $options as $key => $value ) {
            if ( empty( $value ) ) $value = esc_html__( '(empty)', 'pinboard-bookmarks' );
            $output .= '<li class="pinboard-bookmarks-debug-li"><strong>'. $key . ':</strong> <code>' . $value . '</code></li>';
        }
        $output .= '</ul>';
    }

    if ( $debug_urls ) {
        $output .= '<h4 class="pinboard-bookmarks-debug-urls"><strong>' . esc_html__( 'URL and components:', 'pinboard-bookmarks' ) . '</strong></h4>';
        $output .= '<ul class="pinboard-bookmarks-debug-ul">';
        foreach ( $urls as $key => $value ) {
            if ( empty( $value ) ) $value = esc_html__( '(empty)', 'pinboard-bookmarks' );
            $output .= '<li class="pinboard-bookmarks-debug-li"><strong>'. $key . ':</strong> <code>' . $value . '</code></li>';
        }
        $output .= '</ul>';
    }

    /**
	 * If display debugging informations to admins only.
	 *
	 * @since 1.3
	 */
	if ( $admin_only ) {
		if ( current_user_can( 'create_users' ) ) {
			return $output;
		} else {
			return '';
		}
	} else {
		return $output;
	}
}
